import asyncio
from typing import Any, Awaitable, Callable, Dict
from cachetools import TTLCache
import logging

from aiogram import Bot, Dispatcher, F, BaseMiddleware
from aiogram.types import (CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Update,
                           User, FSInputFile, TelegramObject, InputMediaPhoto)
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config_data.config import load_config, Config


config: Config = load_config()


format = '[{asctime}] #{levelname:8} {filename}:' \
         '{lineno} - {name} - {message}'

logging.basicConfig(
    level=logging.DEBUG,
    format=format,
    style='{'
)


logger = logging.getLogger(__name__)


bot = Bot(token=config.bot.token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


async def back_main(clb):
    await asyncio.sleep(20)
    photo = InputMediaPhoto(media=FSInputFile('media/Menu.png'), caption='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç')
    await clb.message.edit_media(media=photo, reply_markup=main_keyboard)


class ReturnMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        clb = event
        result = await handler(event, data)

        task_name = 'return_menu'
        for task in asyncio.all_tasks():
            if task.get_name() == task_name:
                task.cancel()
        task = asyncio.create_task(back_main(clb))
        task.set_name(task_name)

        return result


class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self):
        self.storage = TTLCache(
            maxsize=1000,
            ttl=2.5
        )

    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        clb = event
        event_from_user: User = data.get('event_from_user')
        if self.storage.get(event_from_user.id):
            await clb.answer('‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            return
        self.storage[event_from_user.id] = True
        return await handler(event, data)


main_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='‚ùì–ö—Ç–æ —è', callback_data='about'),
            InlineKeyboardButton(text='üë®‚Äçüíª–£—Å–ª—É–≥–∏', callback_data='services')
        ],
        [InlineKeyboardButton(text='üîó–ë–ª–æ–≥ (live)', url='https://t.me/Leggit_live')],
        [InlineKeyboardButton(text='üóÇ–ú–æ–∏ –æ—Ç–∑—ã–≤—ã', url='https://t.me/Leggit_revs')],
        [InlineKeyboardButton(text='üíº–°—Ç—É–¥–∏—è', url='https://t.me/Leggit_Studio')],
        [InlineKeyboardButton(text='üí¨–ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ', url='https://t.me/Leggit_dev')]
    ]
)


@dp.callback_query(F.data == 'about')
async def show_about(clb: CallbackQuery):
    text = ('üëã–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç <b>–ö–∏—Ä–∏–ª–ª</b>, –º–Ω–µ 18 –ª–µ—Ç, –∏ —è ‚Äî Python-developer '
            '(–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç) –ø–æ–¥ –±—Ä–µ–Ω–¥–æ–º <b>Leggit</b>.\n\n<em>–Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º –∏ '
            '–±–∏–∑–Ω–µ—Å–º–µ–Ω–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –∏ '
            '—É–ª—É—á—à–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç—ã –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è .</em>\n\n'
            '<b>‚ùì–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –º–µ–Ω—è?</b>\n\n<b>‚Ä¢ –ì–ª—É–±–æ–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –≤ Telegram-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö :</b>\n'
            '–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –±–æ—Ç–æ–≤ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. '
            '–ë—É–¥—å —Ç–æ –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂, CRM-—Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –≤ Telegram ‚Äî —è —Å–æ–∑–¥–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã, '
            '–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å.\n<b>‚Ä¢ –ú–æ–ª–æ–¥–æ–π, –Ω–æ –æ–ø—ã—Ç–Ω—ã–π: </b>\n–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç, '
            '—è —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –¥–µ—Å—è—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –ú–æ–π –ø–æ–¥—Ö–æ–¥ —Å–æ—á–µ—Ç–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ '
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.\n<b>‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥:</b>\n –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—à—É –∫–æ–¥ ‚Äî '
            '—è –∏–∑—É—á–∞—é –≤–∞—à –±–∏–∑–Ω–µ—Å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ—à–∞–µ—Ç –∏–º–µ–Ω–Ω–æ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.')
    photo = InputMediaPhoto(media=FSInputFile('media/Me.png'), caption=text)
    await clb.message.edit_media(media=photo, reply_markup=main_keyboard)


@dp.callback_query(F.data == 'services')
async def show_services(clb: CallbackQuery):
    text = ('<b><u>–ß—Ç–æ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é?</u></b>\n\n<b>‚Ä¢ üìä–ë–æ—Ç—ã –¥–ª—è –∏–Ω—Ñ–æ–±–∏–∑–Ω–µ—Å–∞</b>: —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ –ø—Ä–æ–¥–∞–∂, '
            'CRM-—Å–∏—Å—Ç–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∏ '
            '—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n‚Ä¢ <b>‚öôÔ∏è–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤</b>: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '
            '–±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∑–∞ –≤–∞—Å 24/7.\n<b>‚Ä¢ ü§ñ–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ò–ò</b>: '
            '–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —É–º–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ '
            '–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.\n<b>‚Ä¢ üí∏–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤</b>: '
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤, —É—Å–ª—É–≥ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Telegram, –≤–∫–ª—é—á–∞—è '
            '–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫.')
    photo = InputMediaPhoto(media=FSInputFile('media/Service.png'), caption=text)
    await clb.message.edit_media(media=photo, reply_markup=main_keyboard)


async def _on_startup():
    await bot.send_photo(
        chat_id=config.bot.channel_id,
        photo=FSInputFile('media/Menu.png'),
        caption='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç',
        reply_markup=main_keyboard
    )


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    dp.callback_query.outer_middleware(ThrottlingMiddleware())
    dp.callback_query.middleware(ReturnMiddleware())

    #dp.startup.register(_on_startup)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())


